{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","currentQuote","currentAuthor","quotes","data","isLoaded","error","getRandomQuote","bind","assertThisInitialized","_this2","fetch","then","res","json","result","setState","random","Math","floor","length","console","log","quoteAuthor","quoteText","twitterUrl","escape","concat","react_default","a","createElement","id","Helmet","type","src","className","href","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2RAiFeA,cA1Eb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,aAAc,GACdC,cAAe,GACfC,OAAQ,CAACC,KAAM,GAAIC,UAAU,EAAOC,MAAO,OAE7Cb,EAAKc,eAAiBd,EAAKc,eAAeC,KAApBd,OAAAe,EAAA,EAAAf,QAAAe,EAAA,EAAAf,CAAAD,KAPLA,mFAUC,IAAAiB,EAAAd,KAClBe,MAAM,qFACHC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KACC,SAACG,GACCL,EAAKM,SAAS,CACZb,OAAQ,CAAEE,UAAU,EAAMD,KAAMW,KAElCL,EAAKH,kBAEP,SAACD,GACCI,EAAKM,SAAS,CACZb,OAAQ,CAACE,UAAU,EAAMC,sDAOjC,IAAKV,KAAKI,MAAMG,OAAOG,MAAO,CAC5B,IAAIW,EAASC,KAAKC,MAAOD,KAAKD,SAAWrB,KAAKI,MAAMG,OAAOC,KAAKgB,QAChEC,QAAQC,IAAIL,GACZrB,KAAKoB,SAAS,CACZd,cAAeN,KAAKI,MAAMG,OAAOC,KAAKa,GAAQM,YAC9CtB,aAAcL,KAAKI,MAAMG,OAAOC,KAAKa,GAAQO,8CAOjD,IAAIC,EAAa,yCAA2CC,OAAM,IAAAC,OAAM/B,KAAKI,MAAMC,aAAjB,WAAA0B,OAAuC/B,KAAKI,MAAME,gBACpH,OAAIN,KAAKI,MAAMG,OAAOG,MAElBsB,EAAAC,EAAAC,cAAA,OAAKC,GAAG,SAAR,qBAEQnC,KAAKI,MAAMG,OAAOE,SAM5BuB,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAACE,EAAA,OAAD,KACEJ,EAAAC,EAAAC,cAAA,UAAQG,KAAK,kBAAkBC,IAAI,qEAErCN,EAAAC,EAAAC,cAAA,OAAKC,GAAG,aACNH,EAAAC,EAAAC,cAAA,OAAKK,UAAU,OACbP,EAAAC,EAAAC,cAAA,OAAKC,GAAG,QAAQnC,KAAKI,MAAMC,eAE7B2B,EAAAC,EAAAC,cAAA,OAAKK,UAAU,OACbP,EAAAC,EAAAC,cAAA,OAAKC,GAAG,UAAUnC,KAAKI,MAAME,gBAE/B0B,EAAAC,EAAAC,cAAA,OAAKK,UAAU,OACbP,EAAAC,EAAAC,cAAA,KAAGC,GAAG,cAAcK,KAAMX,EAAYU,UAAU,eAAcP,EAAAC,EAAAC,cAAA,KAAGK,UAAU,mBAC3EP,EAAAC,EAAAC,cAAA,UAAQK,UAAU,QAAQE,QAASzC,KAAKW,eAAgBwB,GAAG,aAA3D,gBAjBJH,EAAAC,EAAAC,cAAA,OAAKC,GAAG,WAAR,sBAlDUO,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvC,KAAK,SAAAwC,GACjCA,EAAaC","file":"static/js/main.38e7fdde.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport { Helmet } from 'react-helmet';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentQuote: '',\n      currentAuthor: '',\n      quotes: {data: [], isLoaded: false, error: null}\n    }\n    this.getRandomQuote = this.getRandomQuote.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"https://raw.githubusercontent.com/JamesFT/Database-Quotes-JSON/master/quotes.json\")\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            quotes: { isLoaded: true, data: result }\n          });\n          this.getRandomQuote();\n        },\n        (error) => {\n          this.setState({\n            quotes: {isLoaded: true, error }\n          });\n        }\n      )\n  }\n\n  getRandomQuote() {\n    if (!this.state.quotes.error) {\n      let random = Math.floor( Math.random() * this.state.quotes.data.length );\n      console.log(random);\n      this.setState({\n        currentAuthor: this.state.quotes.data[random].quoteAuthor,\n        currentQuote: this.state.quotes.data[random].quoteText\n      });\n    }\n  }\n  \n\n  render() {\n    let twitterUrl = \"https://twitter.com/intent/tweet?text=\" + escape( `\"${this.state.currentQuote}\"\\n\\t- ${this.state.currentAuthor}`);\n    if (this.state.quotes.error) {\n      return (\n        <div id=\"error\">An error occured.</div>\n      )\n    } else if (!this.state.quotes.isLoaded) {\n      return (\n        <div id=\"loading\">Loading ...</div>\n      )\n    }\n    return (\n      <main>\n        <Helmet>\n          <script type=\"text/javascript\" src=\"https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js\" />\n        </Helmet>\n        <div id=\"quote-box\">\n          <div className=\"row\">\n            <div id=\"text\">{this.state.currentQuote}</div>\n          </div>\n          <div className=\"row\">\n            <div id=\"author\">{this.state.currentAuthor}</div>\n          </div>\n          <div className=\"row\">\n            <a id=\"tweet-quote\" href={twitterUrl} className=\"left button\"><i className=\"fa fa-twitter\"></i></a>\n            <button className=\"right\" onClick={this.getRandomQuote} id=\"new-quote\">New Quote</button>\n          </div>\n        </div>\n      </main>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}