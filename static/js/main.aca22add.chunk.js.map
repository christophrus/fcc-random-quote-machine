{"version":3,"sources":["components/QuoteBox.js","components/Button.js","components/Quote.js","App.js","serviceWorker.js","index.js"],"names":["QuoteBox","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","classes","concat","color","className","react_default","a","createElement","id","children","Component","Button","href","onClick","defaultProps","Quote","quote","author","App","_this","state","currentQuote","currentAuthor","currentColor","quotes","data","isLoaded","error","colors","getRandomQuote","bind","assertThisInitialized","_this2","fetch","then","res","json","result","setState","randomQ","Math","floor","random","length","randomC","quoteAuthor","quoteText","twitterUrl","escape","components_QuoteBox","components_Quote","components_Button","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2PAmBeA,2BAhBX,SAAAA,EAAYC,GAAQ,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KACVH,0EAKN,IAAIO,EAAU,YAAAC,OAAYL,KAAKH,MAAMS,MAAvB,oCAAiEN,KAAKH,MAAMU,UAE1F,OACIC,EAAAC,EAAAC,cAAA,OAAKH,UAAWH,EAASO,GAAG,aACvBX,KAAKH,MAAMe,iBAZLC,cCAjBC,cAEF,SAAAA,EAAYjB,GAAQ,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAc,GAAAhB,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgB,GAAAX,KAAAH,KACVH,0EAKN,IAAIO,EAAU,UAAAC,OAAUL,KAAKH,MAAMS,MAArB,sBAAAD,OAA+CL,KAAKH,MAAMS,MAA1D,2BAAAD,OAAyFL,KAAKH,MAAMS,MAApG,mCAA6IN,KAAKH,MAAMU,UAEtK,OACIC,EAAAC,EAAAC,cAAA,KAAGK,KAAMf,KAAKH,MAAMkB,KAAMR,UAAWH,EAASY,QAAShB,KAAKH,MAAMmB,QAASL,GAAIX,KAAKH,MAAMc,IACrFX,KAAKH,MAAMe,iBAZPC,aAkBrBC,EAAOG,aAAe,CAClBN,GAAI,GACJI,KAAM,IACNC,QAAS,MAGEF,QCDAI,cArBX,SAAAA,EAAYrB,GAAQ,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAkB,GAAApB,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAoB,GAAAf,KAAAH,KACVH,0EAKN,OACIW,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKH,UAAU,2BAA2BI,GAAG,QACzCH,EAAAC,EAAAC,cAAA,KAAGH,UAAU,qBACbC,EAAAC,EAAAC,cAAA,gBAAQV,KAAKH,MAAMsB,MAAnB,KACAX,EAAAC,EAAAC,cAAA,KAAGH,UAAU,uBAEjBC,EAAAC,EAAAC,cAAA,OAAKH,UAAU,yBAAyBI,GAAG,UACvCH,EAAAC,EAAAC,cAAA,iBAASV,KAAKH,MAAMuB,iBAhBpBP,aCmFLQ,cA3Eb,SAAAA,EAAYxB,GAAO,IAAAyB,EAAA,OAAAxB,OAAAC,EAAA,EAAAD,CAAAE,KAAAqB,IACjBC,EAAAxB,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAuB,GAAAlB,KAAAH,KAAMH,KACD0B,MAAQ,CACXC,aAAc,GACdC,cAAe,GACfC,aAAc,GACdC,OAAQ,CAACC,KAAM,GAAIC,UAAU,EAAOC,MAAO,MAC3CC,OAAQ,CAAC,OAAQ,MAAO,SAAU,SAAU,QAAS,OAAQ,OAAQ,SAAU,SAAU,SAE3FT,EAAKU,eAAiBV,EAAKU,eAAeC,KAApBnC,OAAAoC,EAAA,EAAApC,QAAAoC,EAAA,EAAApC,CAAAwB,KATLA,mFAYC,IAAAa,EAAAnC,KAClBoC,MAAM,qFACHC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KACC,SAACG,GACCL,EAAKM,SAAS,CACZd,OAAQ,CAAEE,UAAU,EAAMD,KAAMY,KAElCL,EAAKH,kBAEP,SAACF,GACCK,EAAKM,SAAS,CACZd,OAAQ,CAACE,UAAU,EAAMC,sDAOjC,IAAK9B,KAAKuB,MAAMI,OAAOG,MAAO,CAC5B,IAAIY,EAAUC,KAAKC,MAAOD,KAAKE,SAAW7C,KAAKuB,MAAMI,OAAOC,KAAKkB,QAC7DC,EAAUJ,KAAKC,MAAOD,KAAKE,SAAW7C,KAAKuB,MAAMQ,OAAOe,QAC5D9C,KAAKyC,SAAS,CACZhB,cAAezB,KAAKuB,MAAMI,OAAOC,KAAKc,GAASM,YAC/CxB,aAAcxB,KAAKuB,MAAMI,OAAOC,KAAKc,GAASO,UAC9CvB,aAAc1B,KAAKuB,MAAMQ,OAAOgB,uCAOpC,IAAIG,EAAa,yCAA2CC,OAAM,IAAA9C,OAAML,KAAKuB,MAAMC,aAAjB,WAAAnB,OAAuCL,KAAKuB,MAAME,gBAChHnB,EAAQN,KAAKuB,MAAMG,aACvB,GAAI1B,KAAKuB,MAAMI,OAAOG,MACpB,OACEtB,EAAAC,EAAAC,cAAA,OAAKC,GAAG,SAAR,qBAEG,IAAKX,KAAKuB,MAAMI,OAAOE,SAC5B,OACErB,EAAAC,EAAAC,cAAA,OAAKC,GAAG,WAAR,eAGJ,IAAIP,EAAO,uDAAAC,OAA0DC,EAA1D,eAAAD,OAA6EC,EAA7E,YACX,OACEE,EAAAC,EAAAC,cAAA,QAAMH,UAAWH,GACfI,EAAAC,EAAAC,cAAC0C,EAAD,CAAU9C,MAAOA,GACbE,EAAAC,EAAAC,cAAC2C,EAAD,CAAOlC,MAAOnB,KAAKuB,MAAMC,aAAcJ,OAAQpB,KAAKuB,MAAME,gBAC1DjB,EAAAC,EAAAC,cAAA,OAAKH,UAAU,QACbC,EAAAC,EAAAC,cAAC4C,EAAD,CAAQ/C,UAAU,aAAaD,MAAOA,EAAOK,GAAG,cAAcI,KAAMmC,GAClE1C,EAAAC,EAAAC,cAAA,KAAGH,UAAU,mBAEfC,EAAAC,EAAAC,cAAC4C,EAAD,CAAQ/C,UAAU,cAAcD,MAAOA,EAAOU,QAAShB,KAAKgC,eAAgBrB,GAAG,aAC7EH,EAAAC,EAAAC,cAAA,oCAnEEG,aCKE0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,KAAK,SAAA+B,GACjCA,EAAaC","file":"static/js/main.aca22add.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nclass QuoteBox extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n\r\n        let classes = `w-2/3 bg-${this.props.color}-lighter p-4 shadow-md font-sans` + this.props.className;\r\n\r\n        return (\r\n            <div className={classes} id=\"quote-box\">\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default QuoteBox;","import React, { Component } from 'react';\r\nclass Button extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n\r\n        let classes = `p-3 bg-${this.props.color}-darkest hover:bg-${this.props.color}-darker shadow-md text-${this.props.color}-lightest no-underline text-sm ` + this.props.className;\r\n\r\n        return (\r\n            <a href={this.props.href} className={classes} onClick={this.props.onClick} id={this.props.id}>\r\n                {this.props.children}\r\n            </a>\r\n        );\r\n    }\r\n}\r\n\r\nButton.defaultProps = {\r\n    id: \"\",\r\n    href: \"#\",\r\n    onClick: null\r\n  };\r\n\r\nexport default Button;","import React, { Component } from 'react';\r\nclass Quote extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"p-2 text-center text-2xl\" id=\"text\">\r\n                    <i className=\"fa fa-quote-left\"></i>\r\n                    <span> {this.props.quote} </span>\r\n                    <i className=\"fa fa-quote-right\"></i>\r\n                </div>\r\n                <div className=\"p-2 text-right text-lg\" id=\"author\">\r\n                    <span>- {this.props.author}</span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Quote;","import React, { Component } from 'react';\nimport './App.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport QuoteBox from './components/QuoteBox';\nimport Button from './components/Button';\nimport Quote from './components/Quote';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentQuote: '',\n      currentAuthor: '',\n      currentColor: '',\n      quotes: {data: [], isLoaded: false, error: null},\n      colors: ['grey', 'red', 'orange', 'yellow', 'green', 'teal', 'blue', 'indigo', 'purple', 'pink']\n    }\n    this.getRandomQuote = this.getRandomQuote.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"https://raw.githubusercontent.com/JamesFT/Database-Quotes-JSON/master/quotes.json\")\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            quotes: { isLoaded: true, data: result }\n          });\n          this.getRandomQuote();\n        },\n        (error) => {\n          this.setState({\n            quotes: {isLoaded: true, error }\n          });\n        }\n      )\n  }\n\n  getRandomQuote() {\n    if (!this.state.quotes.error) {\n      let randomQ = Math.floor( Math.random() * this.state.quotes.data.length );\n      let randomC = Math.floor( Math.random() * this.state.colors.length );\n      this.setState({\n        currentAuthor: this.state.quotes.data[randomQ].quoteAuthor,\n        currentQuote: this.state.quotes.data[randomQ].quoteText,\n        currentColor: this.state.colors[randomC]\n      });\n    }\n  }\n  \n\n  render() {\n    let twitterUrl = \"https://twitter.com/intent/tweet?text=\" + escape( `\"${this.state.currentQuote}\"\\n\\t- ${this.state.currentAuthor}`);\n    let color = this.state.currentColor;\n    if (this.state.quotes.error) {\n      return (\n        <div id=\"error\">An error occured.</div>\n      )\n    } else if (!this.state.quotes.isLoaded) {\n      return (\n        <div id=\"loading\">Loading ...</div>\n      )\n    }\n    let classes = `flex justify-center items-center h-screen w-full bg-${color}-dark text-${color}-darkest`;\n    return (\n      <main className={classes}>\n        <QuoteBox color={color}>\n            <Quote quote={this.state.currentQuote} author={this.state.currentAuthor} />\n            <div className=\"mt-4\">\n              <Button className=\"float-left\" color={color} id=\"tweet-quote\" href={twitterUrl}>\n                <i className=\"fa fa-twitter\"></i>\n              </Button>\n              <Button className=\"float-right\" color={color} onClick={this.getRandomQuote} id=\"new-quote\">\n                <span>New Quote</span>\n              </Button>\n            </div>\n        </QuoteBox>\n      </main>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './css/tailwind.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}